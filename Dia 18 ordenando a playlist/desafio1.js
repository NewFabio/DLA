//Desafio 01:
//Ordenando a Playlist

//Na playlist de m√∫sicas do dia 16, acrescente o que ja foi feito. Utilize os algoritimos para ordenar a playlist pelo t√≠tulo da m√∫sica e tamb√©m pelo n√∫mero de reprodu√ß√µes.
//OBS
//Ordene por titulo utilizando o Bubble Sort e por n√∫mero de reprodu√ß√µes com o Selection Sort.

// Fun√ß√£o para criar uma nova m√∫sica em formato JSON
function criarMusica(nome, artista, tempo) {
    return {
        nome: nome,
        artista: artista,
        reproducoes: 0,
        tempo: tempo
    };
}

// Estrutura da Playlist como um Objeto Literal
const playlist = {
    musicas: [],

    // Adiciona uma m√∫sica ao in√≠cio da playlist
    adicionarMusica: function(nome, artista, tempo) {
        const novaMusica = criarMusica(nome, artista, tempo);
        
        // Criamos um novo array e deslocamos os elementos manualmente
        for (let i = this.musicas.length; i > 0; i--) {
            this.musicas[i] = this.musicas[i - 1];
        }
        this.musicas[0] = novaMusica;
        console.log(`üé∂ M√∫sica "${nome}" adicionada √† playlist!`);
    },

    // Ordena√ß√£o por Nome usando `.sort()`
    ordenarPorNomeSort: function() {
      this.musicas.sort((a, b) => {
        let nomeA = a.nome.toLowerCase();
        let nomeB = b.nome.toLowerCase();

        if (nomeA < nomeB) return -1;
        if (nomeA > nomeB) return 1;
        return 0;
      });

        console.log("üî§ Playlist ordenada por Nome (usando sort).");
    },

    // Ordena√ß√£o por N√∫mero de Reprodu√ß√µes usando `.sort()`
    ordenarPorReproducoesSort: function() {
        this.musicas.sort((a, b) => b.reproducoes - a.reproducoes);
        console.log("üî¢ Playlist ordenada por N√∫mero de Reprodu√ß√µes (usando sort).");
    },

    // Simula tocar uma m√∫sica e aumentar a contagem de reprodu√ß√µes
    tocarMusica: function(nome) {
        for (let i = 0; i < this.musicas.length; i++) {
            if (this.musicas[i].nome === nome) {
                this.musicas[i].reproducoes++;
                console.log(`üéµ Tocando: ${this.musicas[i].nome} - ${this.musicas[i].artista} (${this.musicas[i].tempo})`);
                return;
            }
        }
        console.log(`‚ö†Ô∏è M√∫sica "${nome}" n√£o encontrada.`);
    },

    // Exibe a playlist
    mostrarPlaylist: function() {
        if (this.musicas.length === 0) {
            console.log("üì≠ A playlist est√° vazia.");
        } else {
            console.log("üé∂ Playlist Atual:");
            for (let i = 0; i < this.musicas.length; i++) {
                console.log(`${i + 1}. ${this.musicas[i].nome} - ${this.musicas[i].artista} | Reprodu√ß√µes: ${this.musicas[i].reproducoes}`);
            }
        }
    }
};

// üéß Testando a playlist
playlist.adicionarMusica("Bohemian Rhapsody", "Queen", "5:55");
playlist.adicionarMusica("Shape of You", "Ed Sheeran", "3:53");
playlist.adicionarMusica("Blinding Lights", "The Weeknd", "3:22");
playlist.adicionarMusica("Hotel California", "Eagles", "6:30");
playlist.adicionarMusica("Imagine", "John Lennon", "3:07");

// Mostrar playlist antes da ordena√ß√£o
playlist.mostrarPlaylist();

// Tocar algumas m√∫sicas para modificar a contagem de reprodu√ß√µes
playlist.tocarMusica("Shape of You");
playlist.tocarMusica("Shape of You");
playlist.tocarMusica("Imagine");
playlist.tocarMusica("Bohemian Rhapsody");
playlist.tocarMusica("Bohemian Rhapsody");
playlist.tocarMusica("Bohemian Rhapsody");

// Mostrar playlist com as contagens atualizadas
playlist.mostrarPlaylist();

// Ordenar por Nome e mostrar (usando sort)
playlist.ordenarPorNomeSort();
playlist.mostrarPlaylist();

// Ordenar por Reprodu√ß√µes e mostrar (usando sort)
playlist.ordenarPorReproducoesSort();
playlist.mostrarPlaylist();